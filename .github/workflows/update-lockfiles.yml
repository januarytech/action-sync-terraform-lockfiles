name: Update Terraform lockfiles

on:
  workflow_call:
    inputs:
      # engine:
      #   description: 'The infra-as-code engine to use. Must be `terraform`.'
      #   default: 'terraform'
      #   required: false
      #   type: string
      engine-version:
        description: 'The Terraform version to use for module initialization.'
        default: '1.5.7'
        required: false
        type: string
      platforms:
        description: 'Comma-separated list of platforms to create lockfiles for.'
        default: 'darwin_arm64,darwin_amd64,linux_amd64'
        required: false
        type: string
      selective-update:
        description: 'Whether to selectively update state directories based on files changed in the PR. Set to false to fix historic problems.'
        default: true
        required: false
        type: boolean
      parallelization-limit:
        description: 'How many statefile directories to update concurrently per Actions runner CPU core. Set to 0 for unlimited (can lead to mysterious problems on standard GitHub-hosted runners).'
        default: 3
        required: false
        type: number
      free-disk-space:
        description: 'Whether or not to free runner disk space before beginning, since Terraform providers can be very large.'
        default: true
        required: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform-lockfiles:
    name: Update Terraform lockfiles
    runs-on: ubuntu-latest

    steps:
      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        if: inputs.free-disk-space
        with:
          large-packages: false # This calls apt-get and is therefore a lot slower

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Fetch up to Pull Request base
        uses: rmacklin/fetch-through-merge-base@98594af01ba0825b881902a5dcadbf87bb46d084

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.engine-version }}

      - name: Update all Terraform lockfiles
        shell: bash
        run: |
          shopt -s nullglob

          df -h # With many statefile dirs, disk space can fill up, so always output this to make it easy to figure out just how much disk space you have
          echo
          sudo apt-get install -yy yq
          # First we build the list of potential dirs... (have to do it this way because some config dirs are for actual dirs, and some are for HCL files)
          # The eval here causes glob expansion.
          for _path in $(eval "echo $(yq -r '.dirs | keys | .[]' .terrateam/config.yml | tr '\n' ' ')"); do
            # Modified from https://stackoverflow.com/a/10641810/1198896 - if there hasn't been a change in the directory candidate, then skip
            if ${{ inputs.selective-update}} && git diff --merge-base ${{ github.base_ref }} --name-only --exit-code HEAD -- $_path >/dev/null; then
              continue
            fi

            if test -f $_path; then
              echo $(dirname $_path)
            elif test -d $_path; then
              echo $_path
            fi
          # ...and then - after we deduplicate - we generate a complete provider lockfile, with all relevant platforms
          # Note that we pass -P to xargs to enable parallelization even though GitHub Actions workers don't have a lot of cores, because this command *should be* largely I/O bound. (TODO: find out why -P0 causes ENOSPC errors)
          # To make log output usable, we prefix the directory name to each output line. ; is the sed s command separator, lord help us if anyone sticks that in a path (or whitespace...)
          # To prevent rare line interleaving, we set sed to be line-buffered with `stdbuf -oL`. We do this on sed, not xargs, because AFAIUI stream buffer mode is a process-local thing, not a kernel fd thing
          done | sort | uniq | xargs -P$(($(nproc)*${{ inputs.parallelization-limit }})) -I'{}' bash -o pipefail -c 'cd {} && { trap "rm -rf .terraform" EXIT && terraform init -lock=false -backend=false && terraform providers lock -platform={${{ inputs.platforms }}}; } 2>&1 | stdbuf -oL sed '\''s;^;[{}] ;'\'


      - name: Check for lockfile changes
        id: lockfiles
        shell: bash
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes detected"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "no changes detected"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.lockfiles.outputs.changed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m "Update Terraform lockfiles"
          git push origin HEAD:${{ github.head_ref }}
